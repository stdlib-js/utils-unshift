{
  "version": 3,
  "sources": ["../lib/unshift_array.js", "../lib/unshift_object.js", "../lib/unshift_typed_array.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds one or more elements to the beginning of an array.\n*\n* @private\n* @param {Array} arr - input array\n* @param {Array} items - items to add\n* @returns {Array} input array\n*\n* @example\n* var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n*\n* arr = unshift( arr, [ 6.0, 7.0 ] );\n* // returns [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction unshift( arr, items ) {\n\tvar i;\n\tfor ( i = items.length-1; i >= 0; i-- ) {\n\t\tarr.unshift( items[ i ] );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unshift;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds one or more elements to the beginning of an array-like object.\n*\n* @private\n* @param {Object} obj - input array-like object\n* @param {Array} items - items to add\n* @returns {Object} input object\n*\n* @example\n* var obj = {\n*     'length': 2,\n*     '0': 1.0,\n*     '1': 2.0\n* };\n*\n* obj = unshift( obj, [ 3.0, 4.0 ] );\n* // returns { 'length': 4, '0': 3.0, '1': 4.0, '2': 1.0, '3': 2.0 }\n*/\nfunction unshift( obj, items ) {\n\tvar len;\n\tvar n;\n\tvar i;\n\n\tlen = obj.length;\n\tn = items.length;\n\n\t// Shift all existing elements to the right...\n\tfor ( i = len-1; i >= 0; i-- ) {\n\t\tobj[ i+n ] = obj[ i ];\n\t}\n\t// Add new elements...\n\tfor ( i = 0; i < n; i++ ) {\n\t\tobj[ i ] = items[ i ];\n\t}\n\tobj.length = len + n;\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unshift;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ArrayBuffer = require( '@stdlib/array-buffer' );\nvar ceil2 = require( '@stdlib/math-base-special-ceil2' ); // TODO: nextpow2\n\n\n// MAIN //\n\n/**\n* Adds one or more elements to the beginning of a typed array.\n*\n* ## Notes\n*\n* -   If the underlying `ArrayBuffer` is too short, we need to copy the data to a new `ArrayBuffer`. To do so, we allocate a new `ArrayBuffer` in a manner similar to how `Arrays` are resized (i.e., allocate enough memory to hold `nextpow2(n)` elements).\n* -   Beware that, if an ArrayBuffer view is preceded by one or more other views, the created view may contain elements from those views, thus resulting in possible mutation. Accordingly, providing a typed array view having a shared underlying `ArrayBuffer` may have unintended consequences (including security vulnerabilities).\n*\n* @private\n* @param {TypedArray} arr - input array\n* @param {Array} items - items to add\n* @returns {TypedArray} input array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var arr = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* arr = unshift( arr, 6.0, 7.0 );\n* // returns <Float64Array>[ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction unshift( arr, items ) {\n\tvar nbytes;\n\tvar ibytes;\n\tvar offset;\n\tvar total;\n\tvar len;\n\tvar buf;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tlen = arr.length;\n\tn = items.length;\n\n\tibytes = n * arr.BYTES_PER_ELEMENT;\n\toffset = arr.byteOffset;\n\n\tif ( offset < ibytes ) {\n\t\tnbytes = len * arr.BYTES_PER_ELEMENT;\n\t\ttotal = nbytes + ibytes + offset;\n\t\tbuf = new ArrayBuffer( ceil2( total+1 ) );\n\t\toffset = buf.byteLength - nbytes - ibytes;\n\t\tv = new arr.constructor( buf, offset, len+n );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tv[ i+n ] = arr[ i ];\n\t\t}\n\t} else {\n\t\toffset -= ibytes;\n\t\tv = new arr.constructor( arr.buffer, offset, len+n );\n\t}\n\tfor ( i = 0; i < n; i++ ) {\n\t\tv[ i ] = items[ i ];\n\t}\n\treturn v;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unshift;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isInteger = require( '@stdlib/assert-is-integer' );\nvar format = require( '@stdlib/string-format' );\nvar unshiftArray = require( './unshift_array.js' );\nvar unshiftObject = require( './unshift_object.js' );\nvar unshiftTypedArray = require( './unshift_typed_array.js' );\n\n\n// MAIN //\n\n/**\n* Adds one or more elements to the beginning of a collection.\n*\n* @param {(Array|TypedArray|Object)} collection - collection\n* @param {...*} items - items to add\n* @throws {TypeError} must provide either an array, typed array, or an array-like object\n* @returns {(Array|TypedArray|Object)} updated collection\n*\n* @example\n* var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n*\n* arr = unshift( arr, 6.0, 7.0 );\n* // returns [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var arr = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* arr = unshift( arr, 6.0, 7.0 );\n* // returns <Float64Array>[ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction unshift( collection ) {\n\tvar items;\n\tvar i;\n\titems = new Array( arguments.length-1 );\n\tfor ( i = 0; i < arguments.length-1; i++ ) {\n\t\titems[ i ] = arguments[ i+1 ];\n\t}\n\tif ( isArray( collection ) ) {\n\t\treturn unshiftArray( collection, items );\n\t}\n\t// Check for a typed-array-like object, as verifying actual typed arrays is expensive...\n\tif ( isTypedArrayLike( collection ) ) {\n\t\treturn unshiftTypedArray( collection, items );\n\t}\n\t// Check for an array-like object...\n\tif (\n\t\tcollection !== null &&\n\t\ttypeof collection === 'object' &&\n\t\ttypeof collection.length === 'number' &&\n\t\tisInteger( collection.length ) &&\n\t\tcollection.length >= 0\n\t) {\n\t\treturn unshiftObject( collection, items );\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be either an array, typed array, or an array-like object. Value: `%s`.', collection ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unshift;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add one or more elements to the beginning of a collection.\n*\n* @module @stdlib/utils-unshift\n*\n* @example\n* var unshift = require( '@stdlib/utils-unshift' );\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n*\n* arr = unshift( arr, 6.0, 7.0 );\n* // returns [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* arr = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* arr = unshift( arr, 6.0, 7.0 );\n* // returns <Float64Array>[ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAoCA,SAASC,EAASC,EAAKC,EAAQ,CAC9B,IAAIC,EACJ,IAAMA,EAAID,EAAM,OAAO,EAAGC,GAAK,EAAGA,IACjCF,EAAI,QAASC,EAAOC,CAAE,CAAE,EAEzB,OAAOF,CACR,CAKAF,EAAO,QAAUC,IC/CjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAwCA,SAASC,EAASC,EAAKC,EAAQ,CAC9B,IAAIC,EACAC,EACAC,EAMJ,IAJAF,EAAMF,EAAI,OACVG,EAAIF,EAAM,OAGJG,EAAIF,EAAI,EAAGE,GAAK,EAAGA,IACxBJ,EAAKI,EAAED,CAAE,EAAIH,EAAKI,CAAE,EAGrB,IAAMA,EAAI,EAAGA,EAAID,EAAGC,IACnBJ,EAAKI,CAAE,EAAIH,EAAOG,CAAE,EAErB,OAAAJ,EAAI,OAASE,EAAMC,EACZH,CACR,CAKAF,EAAO,QAAUC,IC/DjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,sBAAuB,EAC9CC,EAAQ,QAAS,iCAAkC,EA2BvD,SAASC,EAASC,EAAKC,EAAQ,CAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAQJ,GANAJ,EAAMN,EAAI,OACVQ,EAAIP,EAAM,OAEVE,EAASK,EAAIR,EAAI,kBACjBI,EAASJ,EAAI,WAERI,EAASD,EAMb,IALAD,EAASI,EAAMN,EAAI,kBACnBK,EAAQH,EAASC,EAASC,EAC1BG,EAAM,IAAIV,EAAaC,EAAOO,EAAM,CAAE,CAAE,EACxCD,EAASG,EAAI,WAAaL,EAASC,EACnCM,EAAI,IAAIT,EAAI,YAAaO,EAAKH,EAAQE,EAAIE,CAAE,EACtCE,EAAI,EAAGA,EAAIJ,EAAKI,IACrBD,EAAGC,EAAEF,CAAE,EAAIR,EAAKU,CAAE,OAGnBN,GAAUD,EACVM,EAAI,IAAIT,EAAI,YAAaA,EAAI,OAAQI,EAAQE,EAAIE,CAAE,EAEpD,IAAME,EAAI,EAAGA,EAAIF,EAAGE,IACnBD,EAAGC,CAAE,EAAIT,EAAOS,CAAE,EAEnB,OAAOD,CACR,CAKAb,EAAO,QAAUG,ICzFjB,IAAAY,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,yBAA0B,EAC7CC,EAAmB,QAAS,oCAAqC,EACjEC,EAAY,QAAS,2BAA4B,EACjDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAe,IACfC,EAAgB,IAChBC,EAAoB,IA4BxB,SAASC,EAASC,EAAa,CAC9B,IAAIC,EACAC,EAEJ,IADAD,EAAQ,IAAI,MAAO,UAAU,OAAO,CAAE,EAChCC,EAAI,EAAGA,EAAI,UAAU,OAAO,EAAGA,IACpCD,EAAOC,CAAE,EAAI,UAAWA,EAAE,CAAE,EAE7B,GAAKV,EAASQ,CAAW,EACxB,OAAOJ,EAAcI,EAAYC,CAAM,EAGxC,GAAKR,EAAkBO,CAAW,EACjC,OAAOF,EAAmBE,EAAYC,CAAM,EAG7C,GACCD,IAAe,MACf,OAAOA,GAAe,UACtB,OAAOA,EAAW,QAAW,UAC7BN,EAAWM,EAAW,MAAO,GAC7BA,EAAW,QAAU,EAErB,OAAOH,EAAeG,EAAYC,CAAM,EAEzC,MAAM,IAAI,UAAWN,EAAQ,+GAAgHK,CAAW,CAAE,CAC3J,CAKAT,EAAO,QAAUQ,IC3CjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_unshift_array", "__commonJSMin", "exports", "module", "unshift", "arr", "items", "i", "require_unshift_object", "__commonJSMin", "exports", "module", "unshift", "obj", "items", "len", "n", "i", "require_unshift_typed_array", "__commonJSMin", "exports", "module", "ArrayBuffer", "ceil2", "unshift", "arr", "items", "nbytes", "ibytes", "offset", "total", "len", "buf", "n", "v", "i", "require_main", "__commonJSMin", "exports", "module", "isArray", "isTypedArrayLike", "isInteger", "format", "unshiftArray", "unshiftObject", "unshiftTypedArray", "unshift", "collection", "items", "i", "main"]
}
