{"version":3,"file":"index.mjs","sources":["../lib/unshift_array.js","../lib/unshift_object.js","../lib/unshift_typed_array.js","../lib/unshift.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds one or more elements to the beginning of an array.\n*\n* @private\n* @param {Array} arr - input array\n* @param {Array} items - items to add\n* @returns {Array} input array\n*\n* @example\n* var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n*\n* arr = unshift( arr, [ 6.0, 7.0 ] );\n* // returns [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction unshift( arr, items ) {\n\tvar i;\n\tfor ( i = items.length-1; i >= 0; i-- ) {\n\t\tarr.unshift( items[ i ] );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default unshift;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds one or more elements to the beginning of an array-like object.\n*\n* @private\n* @param {Object} obj - input array-like object\n* @param {Array} items - items to add\n* @returns {Object} input object\n*\n* @example\n* var obj = {\n*     'length': 2,\n*     '0': 1.0,\n*     '1': 2.0\n* };\n*\n* obj = unshift( obj, [ 3.0, 4.0 ] );\n* // returns { 'length': 4, '0': 3.0, '1': 4.0, '2': 1.0, '3': 2.0 }\n*/\nfunction unshift( obj, items ) {\n\tvar len;\n\tvar n;\n\tvar i;\n\n\tlen = obj.length;\n\tn = items.length;\n\n\t// Shift all existing elements to the right...\n\tfor ( i = len-1; i >= 0; i-- ) {\n\t\tobj[ i+n ] = obj[ i ];\n\t}\n\t// Add new elements...\n\tfor ( i = 0; i < n; i++ ) {\n\t\tobj[ i ] = items[ i ];\n\t}\n\tobj.length = len + n;\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nexport default unshift;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ArrayBuffer from '@stdlib/array-buffer' ;\nimport ceil2 from '@stdlib/math-base-special-ceil2' ; // TODO: nextpow2\n\n\n// MAIN //\n\n/**\n* Adds one or more elements to the beginning of a typed array.\n*\n* ## Notes\n*\n* -   If the underlying `ArrayBuffer` is too short, we need to copy the data to a new `ArrayBuffer`. To do so, we allocate a new `ArrayBuffer` in a manner similar to how `Arrays` are resized (i.e., allocate enough memory to hold `nextpow2(n)` elements).\n* -   Beware that, if an ArrayBuffer view is preceded by one or more other views, the created view may contain elements from those views, thus resulting in possible mutation. Accordingly, providing a typed array view having a shared underlying `ArrayBuffer` may have unintended consequences (including security vulnerabilities).\n*\n* @private\n* @param {TypedArray} arr - input array\n* @param {Array} items - items to add\n* @returns {TypedArray} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var arr = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* arr = unshift( arr, 6.0, 7.0 );\n* // returns <Float64Array>[ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction unshift( arr, items ) {\n\tvar nbytes;\n\tvar ibytes;\n\tvar offset;\n\tvar total;\n\tvar len;\n\tvar buf;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tlen = arr.length;\n\tn = items.length;\n\n\tibytes = n * arr.BYTES_PER_ELEMENT;\n\toffset = arr.byteOffset;\n\n\tif ( offset < ibytes ) {\n\t\tnbytes = len * arr.BYTES_PER_ELEMENT;\n\t\ttotal = nbytes + ibytes + offset;\n\t\tbuf = new ArrayBuffer( ceil2( total+1 ) );\n\t\toffset = buf.byteLength - nbytes - ibytes;\n\t\tv = new arr.constructor( buf, offset, len+n );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tv[ i+n ] = arr[ i ];\n\t\t}\n\t} else {\n\t\toffset -= ibytes;\n\t\tv = new arr.constructor( arr.buffer, offset, len+n );\n\t}\n\tfor ( i = 0; i < n; i++ ) {\n\t\tv[ i ] = items[ i ];\n\t}\n\treturn v;\n}\n\n\n// EXPORTS //\n\nexport default unshift;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array' ;\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like' ;\nimport isInteger from '@stdlib/assert-is-integer' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport unshiftArray from './unshift_array.js' ;\nimport unshiftObject from './unshift_object.js' ;\nimport unshiftTypedArray from './unshift_typed_array.js' ;\n\n\n// MAIN //\n\n/**\n* Adds one or more elements to the beginning of a collection.\n*\n* @param {(Array|TypedArray|Object)} collection - collection\n* @param {...*} items - items to add\n* @throws {TypeError} must provide either an array, typed array, or an array-like object\n* @returns {(Array|TypedArray|Object)} updated collection\n*\n* @example\n* var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n*\n* arr = unshift( arr, 6.0, 7.0 );\n* // returns [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var arr = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* arr = unshift( arr, 6.0, 7.0 );\n* // returns <Float64Array>[ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction unshift( collection ) {\n\tvar items;\n\tvar i;\n\titems = new Array( arguments.length-1 );\n\tfor ( i = 0; i < arguments.length-1; i++ ) {\n\t\titems[ i ] = arguments[ i+1 ];\n\t}\n\tif ( isArray( collection ) ) {\n\t\treturn unshiftArray( collection, items );\n\t}\n\t// Check for a typed-array-like object, as verifying actual typed arrays is expensive...\n\tif ( isTypedArrayLike( collection ) ) {\n\t\treturn unshiftTypedArray( collection, items );\n\t}\n\t// Check for an array-like object...\n\tif (\n\t\tcollection !== null &&\n\t\ttypeof collection === 'object' &&\n\t\ttypeof collection.length === 'number' &&\n\t\tisInteger( collection.length ) &&\n\t\tcollection.length >= 0\n\t) {\n\t\treturn unshiftObject( collection, items );\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be either an array, typed array, or an array-like object. Value: `%s`.', collection ) );\n}\n\n\n// EXPORTS //\n\nexport default unshift;\n"],"names":["unshift","arr","items","i","length","obj","len","n","nbytes","ibytes","offset","buf","v","BYTES_PER_ELEMENT","byteOffset","ArrayBuffer","ceil2","byteLength","constructor","buffer","collection","Array","arguments","isArray","unshiftArray","isTypedArrayLike","unshiftTypedArray","isInteger","unshiftObject","TypeError","format"],"mappings":";;khBAoCA,SAASA,EAASC,EAAKC,GACtB,IAAIC,EACJ,IAAMA,EAAID,EAAME,OAAO,EAAGD,GAAK,EAAGA,IACjCF,EAAID,QAASE,EAAOC,IAErB,OAAOF,ECDR,SAASD,EAASK,EAAKH,GACtB,IAAII,EACAC,EACAJ,EAMJ,IAJAG,EAAMD,EAAID,OACVG,EAAIL,EAAME,OAGJD,EAAIG,EAAI,EAAGH,GAAK,EAAGA,IACxBE,EAAKF,EAAEI,GAAMF,EAAKF,GAGnB,IAAMA,EAAI,EAAGA,EAAII,EAAGJ,IACnBE,EAAKF,GAAMD,EAAOC,GAGnB,OADAE,EAAID,OAASE,EAAMC,EACZF,ECPR,SAASL,EAASC,EAAKC,GACtB,IAAIM,EACAC,EACAC,EAEAJ,EACAK,EACAJ,EACAK,EACAT,EAQJ,GANAG,EAAML,EAAIG,OAGVK,GAFAF,EAAIL,EAAME,QAEGH,EAAIY,mBACjBH,EAAST,EAAIa,YAECL,EAMb,IALAD,EAASF,EAAML,EAAIY,kBAGnBH,GADAC,EAAM,IAAII,EAAaC,EADfR,EAASC,EAASC,EACU,KACvBO,WAAaT,EAASC,EACnCG,EAAI,IAAIX,EAAIiB,YAAaP,EAAKD,EAAQJ,EAAIC,GACpCJ,EAAI,EAAGA,EAAIG,EAAKH,IACrBS,EAAGT,EAAEI,GAAMN,EAAKE,QAGjBO,GAAUD,EACVG,EAAI,IAAIX,EAAIiB,YAAajB,EAAIkB,OAAQT,EAAQJ,EAAIC,GAElD,IAAMJ,EAAI,EAAGA,EAAII,EAAGJ,IACnBS,EAAGT,GAAMD,EAAOC,GAEjB,OAAOS,EC3BR,SAASZ,EAASoB,GACjB,IAAIlB,EACAC,EAEJ,IADAD,EAAQ,IAAImB,MAAOC,UAAUlB,OAAO,GAC9BD,EAAI,EAAGA,EAAImB,UAAUlB,OAAO,EAAGD,IACpCD,EAAOC,GAAMmB,UAAWnB,EAAE,GAE3B,GAAKoB,EAASH,GACb,OAAOI,EAAcJ,EAAYlB,GAGlC,GAAKuB,EAAkBL,GACtB,OAAOM,EAAmBN,EAAYlB,GAGvC,GACgB,OAAfkB,GACsB,iBAAfA,GACsB,iBAAtBA,EAAWhB,QAClBuB,EAAWP,EAAWhB,SACtBgB,EAAWhB,QAAU,EAErB,OAAOwB,EAAeR,EAAYlB,GAEnC,MAAM,IAAI2B,UAAWC,EAAQ,+GAAgHV"}